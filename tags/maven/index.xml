<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Maven on Somnus</title>
        <link>https://zhumengzhu.github.io/tags/maven/</link>
        <description>Recent content in Maven on Somnus</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>All Rights Reserved</copyright>
        <lastBuildDate>Fri, 20 Dec 2024 11:26:48 +0800</lastBuildDate><atom:link href="https://zhumengzhu.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java 类冲突问题及其解决方案</title>
        <link>https://zhumengzhu.github.io/2023/04/java-class-conflict-and-solutions/</link>
        <pubDate>Mon, 03 Apr 2023 18:26:48 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/04/java-class-conflict-and-solutions/</guid>
        <description>&lt;h2 id=&#34;引子&#34;&gt;引子
&lt;/h2&gt;&lt;p&gt;在启动 Java 项时，可能会出现这种&lt;strong&gt;诡异&lt;/strong&gt;的现象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在本地可以启动，但部署到服务器上却不能启动；&lt;/li&gt;
&lt;li&gt;或者，在服务器可以启动，但本地不可以启动；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此时如果去查看错误日志，往往可以看到诸如 ClassNotFoundException、NoClassDefFoundError 等异常信息，接着很容易就会想到很可能是发生了类冲突。
然后你会结合异常日志即依赖变更情况，定位到冲突的类及其所在的 jar 包，然后用 dependecy-exclude 等手段将冲突解决掉，最终使得服务可以正常启动。一般我们处理问题就到此为止了。
本文试图更近一步，&lt;strong&gt;深入分析本地与远程服务器行为不一致的原因&lt;/strong&gt;，并简单介绍&lt;strong&gt;业界解决依赖冲突的一些方法，和排查类冲突问题的小技巧&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Java Classpath&lt;/strong&gt;:
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_1_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;本地启动的-classpath-顺序&#34;&gt;本地启动的 Classpath 顺序
&lt;/h2&gt;&lt;p&gt;本地一般都是在 IDEA 中启动；IDEA 启动服务时，会在 Console 打印启动参数：
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_2_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那么 IDEA 是以怎样的顺序将 jar 包添加到 classpath 中呢？&lt;/p&gt;
&lt;p&gt;答案：是按 Maven 依赖解析的方式进行加载的。通过执行 &lt;code&gt;mvn dependency:list&lt;/code&gt; 可以看到 Maven 依赖解析的结果，这个顺序，就是 classpath 中 jar 的添加顺序：
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_3_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;通过对比可以发现，两者顺序一致。&lt;/p&gt;
&lt;h2 id=&#34;远程启动的-classpath-顺序&#34;&gt;远程启动的 Classpath 顺序
&lt;/h2&gt;&lt;p&gt;登录服务器，使用 &lt;code&gt;ps aux | grep java&lt;/code&gt; 查看启动参数，会发现，&lt;strong&gt;远程服务器没有加 &lt;code&gt;-classpath&lt;/code&gt;  参数！！！相关的依赖在哪里？？？&lt;/strong&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_4_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;实际上，在构建项目时，Maven 会将所有的依赖都添加到 xx-server.jar 中的 BOOT-INF/lib 目录下。&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;&lt;strong&gt;JVM 在启动时，会根据 Jar 包中的另一个元数据文件&amp;ndash;&lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;，来决定类的加载顺序。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;meta-infmanifestmf&#34;&gt;META-INF/MANIFEST.MF
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_5_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，JVM 在加载类的顺序依赖 OS 时，对于 Linux 来说，最底层是 &lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/dcad5330b06f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;opendir&lt;/a&gt; 函数，这个函数返回的顺序，又与文件系统有关。『对于 CentOS 6，它使用的是Ext4，文件顺序与目录文件的大小是否超过一个磁盘块和文件系统计算的Hash值有关。』&lt;/p&gt;
&lt;p&gt;简单说，先加载完全是哪个看运气！远程服务器的版本不同，加载的顺序就可能不一样。这就是文章开头诡异问题的根源。&lt;/p&gt;
&lt;p&gt;看运气怎么行？！&lt;/p&gt;
&lt;h3 id=&#34;spring-boot-maven-plugin&#34;&gt;spring-boot-maven-plugin
&lt;/h3&gt;&lt;p&gt;这个插件使用了 &lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/redirect.html?page=executable-jar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Executable Jar Format&lt;/a&gt;，支持一种称之为 Classpath Index 的索引文件，负责指定 jar 被添加到 classpath 中的顺序。很明显，通过这个插件可以保证 jar 的扫描顺序在不同的环境下是一致的。完美解决上面的问题。
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_6_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image6&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小节&#34;&gt;小节
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类的加载顺序取决于 classpath；&lt;/li&gt;
&lt;li&gt;嵌套的 JARS 中的加载顺序，在默认情况取决于 OS，对于 Linux 来说取决于文件系统；&lt;/li&gt;
&lt;li&gt;Spring Boot 提供了一个插件，利用 The Executable Jar Format 完美解决了加载顺序错乱问题；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它
&lt;/h2&gt;&lt;h3 id=&#34;业界的一些其他解决方案&#34;&gt;业界的一些其他解决方案
&lt;/h3&gt;&lt;p&gt;Spring Boot 的方案可以解决拥有 main 方法的服务的冲突问题，解决方法依赖一个 Maven 差距。&lt;/p&gt;
&lt;p&gt;对于开发或扩展类库(比如 guava/hadoop)，或者 Java Agent 的开发时，有时候面临的问题更复杂，甚至要解决 classloader 冲突的问题。&lt;/p&gt;
&lt;h4 id=&#34;maven-plugin-shade&#34;&gt;maven-plugin-shade
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lkxed/p/maven-plugin-shade.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maven-plugin-shade 详解&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;自定义类加载器&#34;&gt;自定义类加载器
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tianshuang.me/2021/10/Java-Agent-%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%9A%94%E7%A6%BB%E5%AE%9E%E7%8E%B0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java Agent 的类加载隔离实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;思路：『使用独立的类加载器去加载 Java Agent 依赖的类，该独立的类加载器的 parent 指向 Bootstrap ClassLoader，且&lt;strong&gt;将 Java Agent 依赖的类的默认后缀 .class 进行调整&lt;/strong&gt;，以避免系统类加载器加载到这些类，以实现类的隔离。』&lt;/p&gt;
&lt;h3 id=&#34;类冲突问题排查小技巧&#34;&gt;类冲突问题排查小技巧
&lt;/h3&gt;&lt;h4 id=&#34;加启动参数--verboseclasspath&#34;&gt;加启动参数 -verbose:classpath
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_7_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image7&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;加上这个参数， JVM 会将『哪个类是从哪个 jar中被加载』的信息输出到 console 中。&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;这个方法需要你能控制启动参数，适合在本地，不确定哪个类冲突的时候使用。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用-arthas-的-jad-功能&#34;&gt;使用 arthas 的 Jad 功能
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_8_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image8&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;arthas 输出的信息更全面，出了现实加载的位置，还会告诉你 ClassLoader 是哪一个，并且自动反编译(&lt;font color=Orange&gt;jad 命令本来就是干这个的！&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;这个方法需要你安装 arthas，适合本地和 dev、test 环境，在你有了明确的怀疑对象时，优先使用这个命令。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何安装-arthas&#34;&gt;如何安装 arthas
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# https://arthas.aliyun.com/doc/install-detail.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -O https://arthas.aliyun.com/arthas-boot.jar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar arthas-boot.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
