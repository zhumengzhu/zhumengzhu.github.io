<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spatial-Index on Somnus</title>
        <link>https://zhumengzhu.github.io/tags/spatial-index/</link>
        <description>Recent content in Spatial-Index on Somnus</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>All Rights Reserved</copyright>
        <lastBuildDate>Tue, 10 Dec 2024 21:31:50 +0800</lastBuildDate><atom:link href="https://zhumengzhu.github.io/tags/spatial-index/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>空间索引技术初见</title>
        <link>https://zhumengzhu.github.io/2022/09/spatial-index-technology-first-glimpse/</link>
        <pubDate>Thu, 22 Sep 2022 21:31:50 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2022/09/spatial-index-technology-first-glimpse/</guid>
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;为了向用户提供天气服务，计划接入三方天气 API，但有些三方的 API 按调用次数收费；为了节省成本，考虑使用缓存以减少调用次数。具体如何实现呢？&lt;/p&gt;
&lt;p&gt;考虑到用户的请求参数经度和纬度两个参数，直接使用经纬度作为缓存的 key 显然不合适，因为经纬度是连续的、无限的，因此需要使用空间索引技术。&lt;/p&gt;
&lt;p&gt;首先想到的自然是 GeoHash，它是空间索引的一种实现，将地球上的二维经纬度映射到一维的整数空间，然后使用整数空间进行索引。&lt;/p&gt;
&lt;h2 id=&#34;geohash-和-redis&#34;&gt;GeoHash 和 Redis
&lt;/h2&gt;&lt;h3 id=&#34;资料一&#34;&gt;资料一
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/groupon-eng/scaling-millions-of-geospatial-queries-per-minute-using-redis-7c05bcf6b4db&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/groupon-eng/scaling-millions-of-geospatial-queries-per-minute-using-redis-7c05bcf6b4db&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.io/commands/GEOADD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GEOADD&lt;/a&gt; command can be used to index spatial entities in Redis.&lt;/p&gt;
&lt;p&gt;The time complexity for this command is &lt;strong&gt;O(log(N))&lt;/strong&gt; for each item added, where N is the number of elements in the sorted set.&lt;/p&gt;
&lt;p&gt;To perform a spatial search of entities &lt;a class=&#34;link&#34; href=&#34;https://redis.io/docs/latest/commands/georadius/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GEORADIUS&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://redis.io/docs/latest/commands/georadiusbymember/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GEORADIUSBYMEMBER&lt;/a&gt; can be used in Redis 3.&amp;gt; 2.0 (and above) and GEOSEARCH or GEOSEARCHSTORE can be used in Redis 6.2 (and above).&lt;/p&gt;
&lt;p&gt;The time complexity for these commands is approximately &lt;strong&gt;O(N+log(M))&lt;/strong&gt; where N is the number of &amp;gt; elements inside the bounding box of the circular area delimited by center and radius, and M is &amp;gt; the number of items inside the index.&lt;/p&gt;
&lt;p&gt;There are plenty of solutions available for implementing spatial searches.&lt;/p&gt;
&lt;p&gt;Data structures like &lt;strong&gt;Quadtree, R-tree, and K-d tree&lt;/strong&gt; can be used to index the entities.&lt;/p&gt;
&lt;p&gt;Geospatial indexers like S2 and H3 can be used for similar queries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;疑问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么 GEOADD 复杂度是 O(log(N))，为什么 ZADD 复杂度是 O(log(N))，两者有什么关系？&lt;/li&gt;
&lt;li&gt;为什么 GEORADIUS 复杂度是 O(N + log(M)), 为什么 ZRANGE 复杂度是 O(N+log(M))，两者有什么关系？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZADD 与 ZRANGE 的时间复杂度：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/feeltouch/article/details/89007544&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis中Sorted-Set时间复杂度和实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GEOADD 底层基于 ZADD，所以复杂度相同；&lt;/li&gt;
&lt;li&gt;GEORADIUS 底层基于 ZRANGE，但是更复杂，所以复杂度相同，但由于会搜索周边 9 个方格，因此系数更大；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;资料二&#34;&gt;资料二
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.memurai.com/blog/geospatial-queries-in-redis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.memurai.com/blog/geospatial-queries-in-redis&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Redis 不存储原始的坐标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GEOADD cities -122.34 47.61 Seattle
ZRANGE cities 0 -1 WITHSCORES
GEOHASH cities Seattle
GEOPOS cities Seattle&lt;/p&gt;
&lt;p&gt;Notice that we provided –122.34 as longitude and 47.61 as latitude when calling GEOADD, but &amp;gt; received –122.33999758958816528 and 47.61000085169597185, respectively, in return.&lt;/p&gt;
&lt;p&gt;This is an unfortunate consequence of Redis using a 52-bit geohash to store the coordinates:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis does not store the raw set of coordinates that we provide&lt;/strong&gt;, but instead decodes the
internally stored geohash to generate a GEOPOS response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;资料三&#34;&gt;资料三
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://luoming1224.github.io/2019/04/08/%5Bredis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dredis%E4%B8%ADGeo%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://luoming1224.github.io/2019/04/08/%5Bredis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dredis%E4%B8%ADGeo%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://luoming1224.github.io/2019/04/04/[redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0]GeoHash%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://luoming1224.github.io/2019/04/04/[redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0]GeoHash%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/62844#slide-16&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/62844#slide-16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GeoSearch 原理&lt;/strong&gt;
geohash编码越长精度越高，相反编码越短，表示的范围越大，前缀相同的字符串表示的范围接近，根据中心点位置和搜索范围&amp;gt; 距离计算geohash编码的长度和geohash编码，然后搜索以该geohash编码为前缀的点以及周边８个范围内的点，返回满足要求&amp;gt; 的点。&lt;/p&gt;
&lt;p&gt;函数geohashGetAreasByRadiusWGS84根据中心点位置和搜索范围距离计算geohash编码的长度和geohash编码，以及在&amp;gt; geohash长度编码的基础上，计算周边8个区块的geohash。&lt;/p&gt;
&lt;p&gt;函数membersOfAllNeighbors对中心点以及它周边八个方向进行查找，找出所有范围内的元素，返回满足搜索距离范围的点。&amp;gt; 该函数中依次对中心点及周边8个区块调用membersOfGeoHashBox函数。&lt;/p&gt;
&lt;p&gt;long_range和lat_range为地球经纬度的范围；hash-&amp;gt;bits用户保存最终二进制编码结果，hash-&amp;gt;step是经纬度划分的次&amp;gt; 数，在redis中该值为26，&lt;strong&gt;即经度/纬度的二进制编码长度为26&lt;/strong&gt;，最终经交叉组合而成的地理位置的二进制编码为52位。Base32&amp;gt; 编码为每5bits组成一个字符，所以&lt;strong&gt;最终的GeoHash字符串为11位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么是52位？因为在redis中是把地理位置编码后的二进制值存入zset数据结构中，&lt;strong&gt;double类型的尾数部分长度为52位&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;redis-的设计思路推演&#34;&gt;Redis 的设计思路推演
&lt;/h3&gt;&lt;p&gt;GeoHash 除了可以对空间进行编码之外，还有两个关键特性，使得 Redis 可以通过组合 GeoHash 与 ZSET，实现空间索引功能，这两个特性是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;哈希可以有任意精度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相近点有相似的前缀，这使得可以通过比较 geohash 值查找附近的点；
思路推演：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当只使用 GeoHash 时，我们可以很方便的判定两个点是否在属于同一个区域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GeoHash(point1, precision=7) == GeoHash(point2, precision=7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果将 hash 值相同的点放入 set，那么就可以实现“周边搜”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先计算要搜索点都 geohash 值；&lt;/li&gt;
&lt;li&gt;然后以该值作为 key 去查找对应的 set；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上述方法，需要预先指定 geohash 的精度，存储和查询时都必须以相同的精度进行，假如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储时：sadd(GeoHash(point1, precision=7), point1);&lt;/li&gt;
&lt;li&gt;读取时：执行 smembers(GeoHash(point1, precision=6)), 由于精度不同，geohash 值不同，此时无法将 point1 查找出来;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假如用上述方法实现地图搜索功能，意味着，如果以 3KM 的网格存储，那么查询也必须以 3KM 进行查，这样的限制太大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时可以利用“相近点有相似前缀”特性，对 geohash 进行排序，也就是用 geohash 作为索引：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，如果存储时精度为 7，那么搜索可以支持大于等 7 的任意精度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Redis 中，支持排序的显然是 ZSET，因此，Redis 最终在 3.2 版本选择了组合 GeoHash 和 ZSET 实现了相关的空间索引功能；
看起来很完美，但是，GeoHash 只是&lt;strong&gt;对大部分点来说，编码相似距离也相近&lt;/strong&gt;，实际它存在突变性，也就是编码相邻但距离可能很远：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GeoHash 存在缺陷：https://www.jianshu.com/p/1ecf03293b9a&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎么找周围 8 个区域的 GeoHash？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;geohash-的缺陷及解决&#34;&gt;GeoHash 的缺陷及解决
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://patents.google.com/patent/CN103383682A/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://patents.google.com/patent/CN103383682A/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.developers.pub/article/637&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.developers.pub/article/637&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;google-s2uber-h3&#34;&gt;Google S2/Uber h3
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6921977063477870606&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6921977063477870606&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_CellID.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_CellID.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/3dbaf73a09af&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/3dbaf73a09af&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_43777978/article/details/116800460&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/qq_43777978/article/details/116800460&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/alinyua/article/details/105803546&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/alinyua/article/details/105803546&lt;/a&gt;
为什么能够做网格空间索引的形状只有三角形、矩形和六边形(&lt;a class=&#34;link&#34; href=&#34;https://www.biaodianfu.com/uber-h3.html%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.biaodianfu.com/uber-h3.html)&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;H3是一种基于网格的空间索引，但跟普通的矩形网格索引不同的是，他的每一个网格都是正六边形。为啥要选正六边形呢，因为在基于网格的空间索引中，使用的多边形的边数越多，则一个网格越近似圆形，做缓冲区查询、kNN查询什么的也就越方便。而做网格索引又要求空间能够被网格铺满，不能有缝隙。根据初中数学知识，我们知道一个多边形的内角和公式为：&lt;/p&gt;
&lt;p&gt;𝜃=(𝑥–2)∗180∘&lt;/p&gt;
&lt;p&gt;其中，x为多边形的边数，𝜃为多边形的内角和。则一个正多边形的每个角的角度为 𝜃𝑥=(𝑥–2)∗180∘𝑥，而如果需要多边形能够铺满空间，则在多边形的顶点相交处，设每个顶点有y个多边形相交，需要满足以下等式：&lt;/p&gt;
&lt;p&gt;360∘𝑦=(𝑥–2)∗180∘𝑥&lt;/p&gt;
&lt;p&gt;以上等式的求解过程我不再赘述，这个等式只有三组整数解：x=3,y=6；x=4,y=4；x=6,y=3。&lt;/p&gt;
&lt;p&gt;因此，能够做网格空间索引的形状只有三角形、矩形和六边形，而六边形因为边数最多，最接近圆，所以理论上来说在某些场景下是最优的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它
&lt;/h2&gt;&lt;h3 id=&#34;什么是wgs84坐标系&#34;&gt;什么是WGS84坐标系
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/97363931&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/97363931&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
