<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JVM on Somnus</title>
        <link>https://zhumengzhu.github.io/tags/jvm/</link>
        <description>Recent content in JVM on Somnus</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>All Rights Reserved</copyright>
        <lastBuildDate>Fri, 20 Dec 2024 12:18:18 +0800</lastBuildDate><atom:link href="https://zhumengzhu.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JVM性能调优实战分享</title>
        <link>https://zhumengzhu.github.io/2024/07/in-depth-jvm-performance-tuning-guide/</link>
        <pubDate>Fri, 19 Jul 2024 11:30:00 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2024/07/in-depth-jvm-performance-tuning-guide/</guid>
        <description>&lt;p&gt;要点简介：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务规模：40台4C8G机器的生产级模型推理集群&lt;/li&gt;
&lt;li&gt;业务基准：稳定支撑1万QPS，服务SLA要求50ms@TP9999&lt;/li&gt;
&lt;li&gt;问题特征：无代码变更的情况下出现性能断崖&lt;/li&gt;
&lt;li&gt;引发思考：看似稳定的系统为何会突然性能劣化？&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&#34;text/javascript&#34; src= &#39;/js/pdf-js/build/pdf.js&#39;&gt;&lt;/script&gt;

&lt;style&gt;
  #embed-pdf-container {
    position: relative;
    width: 100%;
    height: auto;
    min-height: 20vh;
     
  }
  
  .pdf-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  #the-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  
  .pdf-loadingWrapper {
    display: none;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 350px;
  }
  
  .pdf-loading {
    display: inline-block;
    width: 50px;
    height: 50px;
    border: 3px solid #d2d0d0;;
    border-radius: 50%;
    border-top-color: #383838;
    animation: spin 1s ease-in-out infinite;
    -webkit-animation: spin 1s ease-in-out infinite;
  }
  
  
  
  
  
  #overlayText {
    word-wrap: break-word;
    display: grid;
    justify-content: end;
  }
  
  #overlayText a {
    position: relative;
    top: 10px;
    right: 4px;
    color: #000;
    margin: auto;
    background-color: #eeeeee;
    padding: 0.3em 1em;
    border: solid 2px;
    border-radius: 12px;
    border-color: #00000030;
    text-decoration: none;
  }
  
  #overlayText svg {
    height: clamp(1em, 2vw, 1.4em);
    width:  clamp(1em, 2vw, 1.4em);
  }
  
  
  
  @keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  @-webkit-keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  &lt;/style&gt;&lt;div class=&#34;embed-pdf-container&#34; id=&#34;embed-pdf-container-fb7b182a&#34;&gt;
    &lt;div class=&#34;pdf-loadingWrapper&#34; id=&#34;pdf-loadingWrapper-fb7b182a&#34;&gt;
        &lt;div class=&#34;pdf-loading&#34; id=&#34;pdf-loading-fb7b182a&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;overlayText&#34;&gt;
      &lt;a href=&#34;https://zhumengzhu.github.io/pdfs/in-depth-jvm-performance-tuning-guide_v1.pdf&#34; aria-label=&#34;Download&#34; download&gt;
        &lt;svg aria-hidden=&#34;true&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 18 18&#34;&gt;
            &lt;path d=&#34;M9 13c.3 0 .5-.1.7-.3L15.4 7 14 5.6l-4 4V1H8v8.6l-4-4L2.6 7l5.7 5.7c.2.2.4.3.7.3zm-7 2h14v2H2z&#34; /&gt;
        &lt;/svg&gt;
      &lt;/a&gt;
    &lt;/div&gt;
    &lt;canvas class=&#34;pdf-canvas&#34; id=&#34;pdf-canvas-fb7b182a&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;

&lt;div class=&#34;pdf-paginator&#34; id=&#34;pdf-paginator-fb7b182a&#34;&gt;
    &lt;button id=&#34;pdf-prev-fb7b182a&#34;&gt;Previous&lt;/button&gt;
    &lt;button id=&#34;pdf-next-fb7b182a&#34;&gt;Next&lt;/button&gt; &amp;nbsp; &amp;nbsp;
    &lt;span&gt;
      &lt;span class=&#34;pdf-pagenum&#34; id=&#34;pdf-pagenum-fb7b182a&#34;&gt;&lt;/span&gt; / &lt;span class=&#34;pdf-pagecount&#34; id=&#34;pdf-pagecount-fb7b182a&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;
    &lt;a class=&#34;pdf-source&#34; id=&#34;pdf-source-fb7b182a&#34; href=&#34;https://zhumengzhu.github.io/pdfs/in-depth-jvm-performance-tuning-guide_v1.pdf&#34;&gt;[pdf]&lt;/a&gt;
&lt;/div&gt;

&lt;noscript&gt;
View the PDF file &lt;a class=&#34;pdf-source&#34; id=&#34;pdf-source-noscript-fb7b182a&#34; href=&#34;https://zhumengzhu.github.io/pdfs/in-depth-jvm-performance-tuning-guide_v1.pdf&#34;&gt;here&lt;/a&gt;.
&lt;/noscript&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
    (function(){
    var url = &#39;\/pdfs\/in-depth-jvm-performance-tuning-guide_v1.pdf&#39;;

    var hidePaginator = &#34;&#34; === &#34;true&#34;;
    var hideLoader = &#34;&#34; === &#34;true&#34;;
    var selectedPageNum = parseInt(&#34;&#34;) || 1;

    
    var pdfjsLib = window[&#39;pdfjs-dist/build/pdf&#39;];

    
    if (pdfjsLib.GlobalWorkerOptions.workerSrc == &#39;&#39;)
      pdfjsLib.GlobalWorkerOptions.workerSrc = &#34;https:\/\/zhumengzhu.github.io\/&#34; + &#39;js/pdf-js/build/pdf.worker.js&#39;;

    
    var pdfDoc = null,
        pageNum = selectedPageNum,
        pageRendering = false,
        pageNumPending = null,
        scale = 3,
        canvas = document.getElementById(&#39;pdf-canvas-fb7b182a&#39;),
        ctx = canvas.getContext(&#39;2d&#39;),
        paginator = document.getElementById(&#34;pdf-paginator-fb7b182a&#34;),
        loadingWrapper = document.getElementById(&#39;pdf-loadingWrapper-fb7b182a&#39;);


    
    showPaginator();
    showLoader();

    

    function renderPage(num) {
      pageRendering = true;
      
      pdfDoc.getPage(num).then(function(page) {
        var viewport = page.getViewport({scale: scale});
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        
        var renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        var renderTask = page.render(renderContext);

        
        renderTask.promise.then(function() {
          pageRendering = false;
          showContent();

          if (pageNumPending !== null) {
            
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });

      
      document.getElementById(&#39;pdf-pagenum-fb7b182a&#39;).textContent = num;
    }

    

    function showContent() {
      loadingWrapper.style.display = &#39;none&#39;;
      canvas.style.display = &#39;block&#39;;
    }

    

    function showLoader() {
      if(hideLoader) return
      loadingWrapper.style.display = &#39;flex&#39;;
      canvas.style.display = &#39;none&#39;;
    }

    

    function showPaginator() {
      if(hidePaginator) return
      paginator.style.display = &#39;block&#39;;
    }

    

    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }

    

    function onPrevPage() {
      if (pageNum &lt;= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    document.getElementById(&#39;pdf-prev-fb7b182a&#39;).addEventListener(&#39;click&#39;, onPrevPage);

    

    function onNextPage() {
      if (pageNum &gt;= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    }
    document.getElementById(&#39;pdf-next-fb7b182a&#39;).addEventListener(&#39;click&#39;, onNextPage);

    

    pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
      pdfDoc = pdfDoc_;
      var numPages = pdfDoc.numPages;
      document.getElementById(&#39;pdf-pagecount-fb7b182a&#39;).textContent = numPages;

      
      if(pageNum &gt; numPages) {
        pageNum = numPages
      }

      
      renderPage(pageNum);
    });
    })();
&lt;/script&gt;</description>
        </item>
        <item>
        <title>服务内存泄露问题排查记录</title>
        <link>https://zhumengzhu.github.io/2023/07/memory-leak-issue-in-a-service/</link>
        <pubDate>Mon, 17 Jul 2023 11:46:30 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/07/memory-leak-issue-in-a-service/</guid>
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;staging 环境，某个车联网服务内存出现了内存泄露，相关同学在 06-14 及 06-15 两天分别采集了两个 dump 文件，以下简单记录分析过程。&lt;/p&gt;
&lt;p&gt;内存泄露最常用的排查工具是 Eclipse Memory Analyzer (MAT)，使用 MAT 打开两个 dump 文件。&lt;/p&gt;
&lt;h2 id=&#34;首先看-leak-suspects&#34;&gt;首先看 Leak Suspects
&lt;/h2&gt;&lt;h3 id=&#34;疑点一jarfile&#34;&gt;疑点一：JarFile
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 是 Spring Boot 的类加载器，用于加载 jar 包。&lt;/p&gt;
&lt;p&gt;猜测此问题与 Druid &lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/druid/issues/3808&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;issue-3808&lt;/a&gt; 类似：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 jar 包被加载的次数几乎相同；&lt;/li&gt;
&lt;li&gt;内存 dump 中相关对象的数量只有几千个，和请求量无关，更像是某些定时任务在做类加载：
&lt;ul&gt;
&lt;li&gt;06-14 的 dump 中加载次数约为 3250；&lt;/li&gt;
&lt;li&gt;06-15 的 dump 中加载次数约为 1260；
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_1_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_2_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_3_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过升级或降级 &lt;code&gt;mysql-connector-java&lt;/code&gt; 版本进行验证。&lt;/p&gt;
&lt;h3 id=&#34;疑点二lockpubsub&#34;&gt;疑点二：LockPubSub
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;org.redisson.pubsub.LockPubSub&lt;/code&gt; 是 Redisson 的分布式锁实现，用于分布式锁的订阅和消息通知：加锁对象如果已经被锁定需要等待的时候，通过 pubsub 订阅消息注册一个 listener 来&lt;strong&gt;等待锁资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分析 06-14 的内存 dump，发现 key &lt;code&gt;7e5axxxc00:gateway:xx:zz:msg:task:lock:c53fxxxaa13a&lt;/code&gt; 的 listeners 达到 &lt;strong&gt;33206&lt;/strong&gt; 个，内存占用达到 &lt;strong&gt;1.32 GB&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此问题与 &lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/3577&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redisson-issues-3577&lt;/a&gt;有些相似，但我在日志中没有找到这个服务锁的 timeout 日志（可能因为业务代码没打印），而只有获取锁失败的日志。&lt;/p&gt;
&lt;p&gt;另外，业务日志中只有释放锁的日志，而没有加锁的日志(也可能因为业务代码没打印)。 &lt;br&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_4_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_5_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_6_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image6&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;进一步分析&#34;&gt;进一步分析
&lt;/h2&gt;&lt;p&gt;1、对内存泄露部分的 char 数组进行聚合的结果（&lt;strong&gt;2.12 GB 的内存泄露，日志信息 1.66GB，占比接近 80%&lt;/strong&gt;）：
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_7_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image7&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2、其中一个 char 数组到 gc roots 的路径：
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_8_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image8&#34;
	
	
&gt;
这也是内存泄露的路径：OpenTelemetry 在做链路追踪时，会将一次 gRPC、HTTP 调用或 MQ 消费过程中的 Metrics 以及日志信息都放到它的 Context 对象中，这次调用或消费不结束，这些内存就会被引用而释放；业务使用分布式锁的方式可能存在问题，导致很多请求无法结束，大量对象存活无法释放。&lt;/p&gt;
&lt;p&gt;3、以下为该服务打印日志的频率监控&amp;mdash;-每分钟几千条日志。
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_9_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image9&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;4、另外通过Kibana 查询发现，有很多动辄几十 KB 的业务日志（敏感数据就不贴图了）。
5、服务的 GC 信息
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_10_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image10&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_11_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image11&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;综合上述信息，可以确定服务内存泄露，高概率是大日志导致的。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;升级或降级 &lt;code&gt;mysql-connector-java&lt;/code&gt; 版本&lt;/li&gt;
&lt;li&gt;避免大日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/huangwentian/p/14622441.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis分布式锁-这一篇全了解(Redission实现分布式锁完美方案) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/4216&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/redisson/redisson/issues/4216&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/4294&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/redisson/redisson/issues/4294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>JVM 参数建议及理由</title>
        <link>https://zhumengzhu.github.io/2023/06/jvm-parameter-recommendations-and-reasons/</link>
        <pubDate>Sun, 18 Jun 2023 12:18:18 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/06/jvm-parameter-recommendations-and-reasons/</guid>
        <description>&lt;h2 id=&#34;参数建议&#34;&gt;参数建议
&lt;/h2&gt;&lt;p&gt;这些建议基于以下前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器 CPU 支持超线程，即一个核可以当成两个核用，否则，GC 线程相关参数值应该减半；&lt;/li&gt;
&lt;li&gt;如果 JDK 版本小于 &lt;strong&gt;1.8.0_191-b12&lt;/strong&gt;(如&lt;strong&gt;JDK 1.8.0_151&lt;/strong&gt;)，则需要设置 -XX:ParallelGCThreads=n, -XX:ConcGCThreads=n, -XX:G1ConcRefinementThreads=n 三个参数；&lt;/li&gt;
&lt;li&gt;如果 JDK 版本升级到 &lt;strong&gt;1.8.0_191-b12&lt;/strong&gt; 及以上，则最好不要设置上述三个参数，&lt;del&gt;改为设置 -XX:+UnlockExperimentalVMOptions -XX:ActiveProcessorCount=n，n 取容器核数&lt;/del&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;统一设置的参数&#34;&gt;统一设置的参数
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;-XX:+UseG1GC&lt;/th&gt;
          &lt;th&gt;使用垃圾优先(G1)收集器&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintFlagsFinal&lt;/td&gt;
          &lt;td&gt;打印所有参数的最终值（参考：Java -XX:+PrintFlagsFinal命令行参数详解）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintCommandLineFlags&lt;/td&gt;
          &lt;td&gt;是打印那些被新值覆盖的项&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintStringTableStatistics&lt;/td&gt;
          &lt;td&gt;在 JVM 进程退出时会输出 SymbolTable 统计和 StringTable 统计（参考：聊聊jvm的StringTable及SymbolTable）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGC&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;打印GC日志&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGCDetails&lt;/td&gt;
          &lt;td&gt;打印详细的GC日志，还会在退出前打印堆的详细信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGCDateStamps&lt;/td&gt;
          &lt;td&gt;打印CG发生的日期时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGCTimeStamps&lt;/td&gt;
          &lt;td&gt;打印CG发生的相对时间戳&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintHeapAtGC&lt;/td&gt;
          &lt;td&gt;每次GC前后打印堆信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintTenuringDistribution&lt;/td&gt;
          &lt;td&gt;YGC 时，打印出幸存区中对象的年龄分布&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintAdaptiveSizePolicy&lt;/td&gt;
          &lt;td&gt;打印分代大小调整的信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGCApplicationStoppedTime&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;打印应用由于GC而产生的停顿时间&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintGCApplicationConcurrentTime&lt;/td&gt;
          &lt;td&gt;打印应用程序的执行时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+PrintReferenceGC&lt;/td&gt;
          &lt;td&gt;打印软引用、弱引用、虚引用和Finallize队列处理情况&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:ParallelRefProcEnabled&lt;/td&gt;
          &lt;td&gt;启用并行引用处理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:-OmitStackTraceInFastThrow&lt;/td&gt;
          &lt;td&gt;禁用 FastThrow 优化。如果开启，会导致抛出异常时没有堆栈信息，不利于排查问题。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-Xloggc:/app/logs/gc_$HOSTNAME.log&lt;/td&gt;
          &lt;td&gt;GC 日志路径&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:GCLogFileSize=30M&lt;/td&gt;
          &lt;td&gt;GC 日志文件大小&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+UseGCLogFileRotation&lt;/td&gt;
          &lt;td&gt;启用 GC 日志文件滚动策略，需要先设置 -Xloggc&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:NumberOfGCLogFiles=10&lt;/td&gt;
          &lt;td&gt;设置滚动日志时的文件数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;/td&gt;
          &lt;td&gt;当发生 OOM 时，自动生成 dump 文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:HeapDumpPath=&amp;quot;/app/logs/java_%p_$HOSTNAME.hprof&amp;quot;&lt;/td&gt;
          &lt;td&gt;指定 dump 文件的路径&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:ErrorFile=/app/logs/hs_err_%p_$HOSTNAME.log&lt;/td&gt;
          &lt;td&gt;错误发生时，错误数据的存储路径&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-Djava.security.egd=file:/dev/./urandom&lt;/td&gt;
          &lt;td&gt;加快随机数产生过程&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;允许调整的参数&#34;&gt;允许调整的参数
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;-Xms2g&lt;/th&gt;
          &lt;th&gt;-Xms4g&lt;/th&gt;
          &lt;th&gt;total_memory / 2&lt;/th&gt;
          &lt;th&gt;最小堆内存，JVM 初始化时就会分配的堆内存大小。&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;-Xmx2g&lt;/td&gt;
          &lt;td&gt;-Xms4g&lt;/td&gt;
          &lt;td&gt;total_memory / 2&lt;/td&gt;
          &lt;td&gt;最大堆内存&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:MaxDirectMemorySize=512m&lt;/td&gt;
          &lt;td&gt;-XX:MaxDirectMemorySize=512m&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置最大直接内存（参考 &lt;a class=&#34;link&#34; href=&#34;http://lovestblog.cn/blog/2015/05/12/direct-buffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM源码分析之堆外内存完全解读&lt;/a&gt;）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:MaxMetaspaceSize=512m&lt;/td&gt;
          &lt;td&gt;-XX:MaxMetaspaceSize=512m&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置最大元空间（参考&lt;a class=&#34;link&#34; href=&#34;http://lovestblog.cn/blog/2016/10/29/metaspace/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM源码分析之Metaspace解密&lt;/a&gt;）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:MaxGCPauseMillis=200&lt;/td&gt;
          &lt;td&gt;-XX:MaxGCPauseMillis=200&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置最大GC暂停时间的目标。这是一个软目标，JVM将尽最大努力实现它。默认 200ms。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:ParallelGCThreads=4&lt;/td&gt;
          &lt;td&gt;-XX:ParallelGCThreads=8&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置垃圾回收器并行阶段使用的线程数。计算公式见&lt;a class=&#34;link&#34; href=&#34;https://github.com/cncounter/translation/blob/master/tiemao_2022/03_gc_thread_count/README.md#g1-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM调优系列: 默认GC线程数的计算公式&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:ConcGCThreads=1&lt;/td&gt;
          &lt;td&gt;-XX:ConcGCThreads=2&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置垃圾回收器并发阶段使用的线程数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:G1ConcRefinementThreads=5&lt;/td&gt;
          &lt;td&gt;-XX:G1ConcRefinementThreads=9&lt;/td&gt;
          &lt;td&gt;ParallelGCThreads+1&lt;/td&gt;
          &lt;td&gt;设置并发优化线程，只专注扫描日志缓冲区记录的卡片来维护更新 RSet&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:G1ReservePercent=10&lt;/td&gt;
          &lt;td&gt;-XX:G1ReservePercent=10&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;设置要保持空闲的预留内存的百分比，以减少空间溢出的风险。 默认值是10%。 当增加或减少这个百分比时，请确保对Java堆总量进行相同的调整。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:InitiatingHeapOccupancyPercent=45&lt;/td&gt;
          &lt;td&gt;-XX:InitiatingHeapOccupancyPercent=45&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;启动并发GC周期的(整个)堆占用的百分比。 它由基于整个堆占用情况触发并发GC周期的GC使用，而不仅仅是其中的一个代(例如G1)。 值为0表示“执行恒定的GC周期”。 缺省值为45。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-XX:SoftRefLRUPolicyMSPerMB=1000&lt;/td&gt;
          &lt;td&gt;-XX:SoftRefLRUPolicyMSPerMB=1000&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;每1M空闲空间可保持的SoftReference对象生存的时长（单位ms）（参考：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903863062003720&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一次 JVM FullGC 的排查过程及解决方案！&lt;/a&gt;）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;不建议设置的参数&#34;&gt;不建议设置的参数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不设置 -XX:+DisableExplicitGC，这样允许业务使用 System.gc() 在某些特定情况下主动 FullGC；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要指定 -Xmn 参数&lt;/strong&gt;，让 G1 自己去调整；如果设置了年轻代大小，会导致 G1 无法使用暂停时间目标；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整参数示例&#34;&gt;完整参数示例
&lt;/h2&gt;&lt;p&gt;以下针对 4C8G 机器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xms4g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xmx4g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:MaxDirectMemorySize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;512m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:MaxMetaspaceSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;512m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintFlagsFinal
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintCommandLineFlags
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintStringTableStatistics
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+UseG1GC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:MaxGCPauseMillis&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:ParallelGCThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:ConcGCThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:G1ConcRefinementThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGCDetails
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGCDateStamps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGCTimeStamps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintHeapAtGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintTenuringDistribution
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintAdaptiveSizePolicy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGCApplicationStoppedTime
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintGCApplicationConcurrentTime
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:G1ReservePercent&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:InitiatingHeapOccupancyPercent&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:SoftRefLRUPolicyMSPerMB&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+PrintReferenceGC 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:ParallelRefProcEnabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xloggc:/app/logs/gc_&lt;span class=&#34;nv&#34;&gt;$HOSTNAME&lt;/span&gt;.log 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:GCLogFileSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+UseGCLogFileRotation
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:NumberOfGCLogFiles&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+HeapDumpOnOutOfMemoryError
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:HeapDumpPath&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/app/logs/java_%p_&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOSTNAME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.hprof&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:ErrorFile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/app/logs/hs_err_%p_&lt;span class=&#34;nv&#34;&gt;$HOSTNAME&lt;/span&gt;.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:-OmitStackTraceInFastThrow
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Djava.security.egd&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;file:/dev/./urandom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;其它&#34;&gt;其它
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;建议升级 JDK 至少到 1.8.0_191-b12 及以上，原因参考 &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1128500#slide-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM如何获取当前容器的资源限制？&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://xie.infoq.cn/article/59a80c31fa55b2d26751b513f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;云原生架构：容器资源限制及资源可见性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java HotSpot VM Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#sthref51&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;10 Garbage-First Garbage Collector Tuning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/en/blog/collecting-and-reading-g1-garbage-collector-logs-part-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Collecting and reading G1 garbage collector logs - part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq330983778/article/details/127644300&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM性能——JVM调优参数列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.linkedkeeper.com/1511.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;详解 G1 垃圾收集器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/83804324&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM之G1回收器和常见参数配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
