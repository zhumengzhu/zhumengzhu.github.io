<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Trouble Shooting on Somnus</title>
        <link>https://zhumengzhu.github.io/categories/trouble-shooting/</link>
        <description>Recent content in Trouble Shooting on Somnus</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>All Rights Reserved</copyright>
        <lastBuildDate>Fri, 20 Dec 2024 14:14:52 +0800</lastBuildDate><atom:link href="https://zhumengzhu.github.io/categories/trouble-shooting/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JIT deoptimization 风暴导致 CPU 使用率飙升</title>
        <link>https://zhumengzhu.github.io/2023/09/root-cause-jvm-deoptimization-storm/</link>
        <pubDate>Sat, 23 Sep 2023 14:14:52 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/09/root-cause-jvm-deoptimization-storm/</guid>
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;在对某抽奖压测服务时(dev&amp;amp;test环境)，发现当 QPS 达到 100 左右时，CPU 使用率就达到 100%，对应的 on-CPU 火焰图显示，有接近 56% 的 CPU 时间在进行 Deoptimization：
&lt;img src=&#34;https://zhumengzhu.github.io/images/deopt_storm_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;经调研，怀疑是该 JDK Bug 导致：https://bugs.openjdk.org/browse/JDK-8243615
类似的反馈还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mail.openjdk.org/pipermail/hotspot-dev/2016-June/023316.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mail.openjdk.org/pipermail/hotspot-dev/2016-June/023316.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2016-June/023278.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2016-June/023278.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/trinodb/trino/issues/6405&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/trinodb/trino/issues/6405&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://trino.io/blog/2021/10/06/jvm-issues-at-comcast.html#jit-recompilation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://trino.io/blog/2021/10/06/jvm-issues-at-comcast.html#jit-recompilation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;复现方法&#34;&gt;复现方法
&lt;/h2&gt;&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UnstableIfTest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;cos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hotMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hotMethodWrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100_000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotMethodWrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;iteration &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ms&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Step1： 编译代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;javac UnstableIfTest.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Step2：执行代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -XX:PerMethodRecompilationCutoff&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; UnstableIfTest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Step3：在代码执行期间，使用 arthas 或者 async-profiler 收集火焰图&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;profiler start -e cpu -d &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果：
&lt;img src=&#34;https://zhumengzhu.github.io/images/deopt_storm_2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;试分析原因&#34;&gt;试分析原因
&lt;/h2&gt;&lt;h3 id=&#34;实验&#34;&gt;实验
&lt;/h3&gt;&lt;p&gt;注： 这里需要使用 java21，因为之前的版本还不支持打印 deoptimization 日志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用 java21 执行一下命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -XX:+UnlockDiagnosticVMOptions -XX:PerMethodRecompilationCutoff&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; -Xlog:deoptimization&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;debug UnstableIfTest &amp;gt; log.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 大量 deoptimization 日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;18.896s&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;debug&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;deoptimization&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;632&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; UnstableIfTest.hotMethod&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;I&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;V &lt;span class=&#34;nv&#34;&gt;trap_bci&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; unstable_if none &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000113084938 &lt;span class=&#34;nv&#34;&gt;relative_pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000000000138
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;18.896s&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;debug&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;deoptimization&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;632&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; UnstableIfTest.hotMethod&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;I&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;V &lt;span class=&#34;nv&#34;&gt;trap_bci&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; unstable_if none &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000113084938 &lt;span class=&#34;nv&#34;&gt;relative_pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000000000138
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;18.896s&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;debug&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;deoptimization&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;632&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; UnstableIfTest.hotMethod&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;I&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;V &lt;span class=&#34;nv&#34;&gt;trap_bci&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; unstable_if none &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000113084938 &lt;span class=&#34;nv&#34;&gt;relative_pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000000000138
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;18.896s&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;debug&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;deoptimization&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;632&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; UnstableIfTest.hotMethod&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;I&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;V &lt;span class=&#34;nv&#34;&gt;trap_bci&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; unstable_if none &lt;span class=&#34;nv&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000113084938 &lt;span class=&#34;nv&#34;&gt;relative_pc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0x0000000000000138
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第 98 次迭代耗时只有 3ms：
&lt;img src=&#34;https://zhumengzhu.github.io/images/deopt_storm_3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;
第 99 次迭代，耗时 631ms：
（注意在第 98 次迭代时，cid=621 osr，到第 99 次迭代时，cid=624）
&lt;img src=&#34;https://zhumengzhu.github.io/images/deopt_storm_4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在两次迭代直接，总共打印了 10万次(102086-2086=100000) deoptimization 日志，这正好是方法 hotMethodWrapper 内部循环的次数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hotMethodWrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100_000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hotMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>服务内存泄露问题排查记录</title>
        <link>https://zhumengzhu.github.io/2023/07/memory-leak-issue-in-a-service/</link>
        <pubDate>Mon, 17 Jul 2023 11:46:30 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/07/memory-leak-issue-in-a-service/</guid>
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;staging 环境，某个车联网服务内存出现了内存泄露，相关同学在 06-14 及 06-15 两天分别采集了两个 dump 文件，以下简单记录分析过程。&lt;/p&gt;
&lt;p&gt;内存泄露最常用的排查工具是 Eclipse Memory Analyzer (MAT)，使用 MAT 打开两个 dump 文件。&lt;/p&gt;
&lt;h2 id=&#34;首先看-leak-suspects&#34;&gt;首先看 Leak Suspects
&lt;/h2&gt;&lt;h3 id=&#34;疑点一jarfile&#34;&gt;疑点一：JarFile
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 是 Spring Boot 的类加载器，用于加载 jar 包。&lt;/p&gt;
&lt;p&gt;猜测此问题与 Druid &lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/druid/issues/3808&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;issue-3808&lt;/a&gt; 类似：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 jar 包被加载的次数几乎相同；&lt;/li&gt;
&lt;li&gt;内存 dump 中相关对象的数量只有几千个，和请求量无关，更像是某些定时任务在做类加载：
&lt;ul&gt;
&lt;li&gt;06-14 的 dump 中加载次数约为 3250；&lt;/li&gt;
&lt;li&gt;06-15 的 dump 中加载次数约为 1260；
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_1_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_2_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_3_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过升级或降级 &lt;code&gt;mysql-connector-java&lt;/code&gt; 版本进行验证。&lt;/p&gt;
&lt;h3 id=&#34;疑点二lockpubsub&#34;&gt;疑点二：LockPubSub
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;org.redisson.pubsub.LockPubSub&lt;/code&gt; 是 Redisson 的分布式锁实现，用于分布式锁的订阅和消息通知：加锁对象如果已经被锁定需要等待的时候，通过 pubsub 订阅消息注册一个 listener 来&lt;strong&gt;等待锁资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分析 06-14 的内存 dump，发现 key &lt;code&gt;7e5axxxc00:gateway:xx:zz:msg:task:lock:c53fxxxaa13a&lt;/code&gt; 的 listeners 达到 &lt;strong&gt;33206&lt;/strong&gt; 个，内存占用达到 &lt;strong&gt;1.32 GB&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此问题与 &lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/3577&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redisson-issues-3577&lt;/a&gt;有些相似，但我在日志中没有找到这个服务锁的 timeout 日志（可能因为业务代码没打印），而只有获取锁失败的日志。&lt;/p&gt;
&lt;p&gt;另外，业务日志中只有释放锁的日志，而没有加锁的日志(也可能因为业务代码没打印)。 &lt;br&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_4_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_5_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_6_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image6&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;进一步分析&#34;&gt;进一步分析
&lt;/h2&gt;&lt;p&gt;1、对内存泄露部分的 char 数组进行聚合的结果（&lt;strong&gt;2.12 GB 的内存泄露，日志信息 1.66GB，占比接近 80%&lt;/strong&gt;）：
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_7_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image7&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2、其中一个 char 数组到 gc roots 的路径：
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_8_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image8&#34;
	
	
&gt;
这也是内存泄露的路径：OpenTelemetry 在做链路追踪时，会将一次 gRPC、HTTP 调用或 MQ 消费过程中的 Metrics 以及日志信息都放到它的 Context 对象中，这次调用或消费不结束，这些内存就会被引用而释放；业务使用分布式锁的方式可能存在问题，导致很多请求无法结束，大量对象存活无法释放。&lt;/p&gt;
&lt;p&gt;3、以下为该服务打印日志的频率监控&amp;mdash;-每分钟几千条日志。
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_9_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image9&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;4、另外通过Kibana 查询发现，有很多动辄几十 KB 的业务日志（敏感数据就不贴图了）。
5、服务的 GC 信息
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_10_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image10&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/memory_leak_11_2023-6-17_19-7-33.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image11&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;综合上述信息，可以确定服务内存泄露，高概率是大日志导致的。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;升级或降级 &lt;code&gt;mysql-connector-java&lt;/code&gt; 版本&lt;/li&gt;
&lt;li&gt;避免大日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/huangwentian/p/14622441.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis分布式锁-这一篇全了解(Redission实现分布式锁完美方案) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/4216&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/redisson/redisson/issues/4216&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/redisson/redisson/issues/4294&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/redisson/redisson/issues/4294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Java 服务老年代内存异常：大对象的影响与解决方案</title>
        <link>https://zhumengzhu.github.io/2023/06/java-service-old-generation-memory-anomaly-large-object-impact-and-solutions/</link>
        <pubDate>Mon, 26 Jun 2023 13:30:37 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/06/java-service-old-generation-memory-anomaly-large-object-impact-and-solutions/</guid>
        <description>&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;某 Java 服务的老年代内存占用持续高位，怀疑可能存在内存泄漏的风险。
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_1_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;排查记录&#34;&gt;排查记录
&lt;/h2&gt;&lt;h3 id=&#34;分析堆内存-dump&#34;&gt;分析堆内存 dump
&lt;/h3&gt;&lt;h4 id=&#34;dump分析&#34;&gt;dump&amp;amp;&amp;amp;分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jmap -dump:[live],format=b,file=&amp;lt;file-path&amp;gt; &amp;lt;pid&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;live&lt;/code&gt;: if set, it only prints objects which have active references and discards the ones that are ready to be garbage collected. This parameter is optional.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format=b&lt;/code&gt;: specifies that the dump file will be in binary format. If not set, the result is the same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt;: the file where the dump will be written to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pid&lt;/code&gt;: id of the Java process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、不进行 FullGC 直接 dump 内存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jmap -dump:format=b,file=dump.hprof 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -cvzf dump.zip dump.hprof # 压缩，以方便下载
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Leak Suspects 显示主要疑点全部与 &lt;code&gt;com.ecwid.consul.v1.Response&lt;/code&gt; 有关。
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_2_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_3_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_4_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2、强制 FullGC 然后 dump 内存
依次执行以下命令，获取内存 dump 然后进行压缩（提高文件下载速度），然后通过服务治理平台-文件下载功能下载到本地，使用 eclipse mat 或者 VisualVM 进行分析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jmap -dump:live,format=b,file=dump.hprof 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -cvzf dump.zip dump.hprof
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;结论&#34;&gt;结论
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Old Gen 虽然会达到很高占比，但总是能最终下降到低位，说明不存在严格意义上的内存泄露；&lt;/li&gt;
&lt;li&gt;根据 Leak Suspects 报告，Old Gen 占用高主要是类 com.ecwid.consul.v1.Response 导致，它代表从 consul 拉取的数据，包括两类；
&lt;ul&gt;
&lt;li&gt;CustomConfigWatch（javakit）获取的数据大小约 2MB；&lt;/li&gt;
&lt;li&gt;ConsulCatalogWatch（SpringBoot）获取的数据大小约 170KB；&lt;/li&gt;
&lt;li&gt;这些数据会导致产生 Humongous 对象：比如网络层面接收这些数据时需要分配大的 byte 数组，转为 HttpResponse 时分配 char 数组（CharArrayBuffer）；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据 Dominator Tree，除了 consul 数据，监控数据占内存同样很高
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_5_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_6_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image6&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分析-gc-日志&#34;&gt;分析 GC 日志
&lt;/h3&gt;&lt;h4 id=&#34;结论-1&#34;&gt;结论
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Old Gen 占比高并不是因为长生命周期对象晋升，而是大量分配 Humongous 对象（简称 H-Obj）&amp;mdash;-因为根据监控，在没有 GC 时，Old Gen 的却一直在增长；&lt;/li&gt;
&lt;li&gt;每当进行 H-obj 分配时，就会触发 Mixed GC 的并发标记循环，进而导致一次 YGC（inital mark），回收死亡的 H-Obj；但如果当前处于 Mixed GC 阶段，则不会再触发一次；&lt;/li&gt;
&lt;li&gt;由于 H-obj 的分配频率非常高，因此实际会一直处于 Mixed GC 阶段（中间可以夹杂多次 YGC）；&lt;/li&gt;
&lt;li&gt;在 YGC 以及 Mixed GC 的 cleanup 阶段，Old Gen 会大幅下降，因为此阶段会对 H-Obj 对象进行清理；&lt;/li&gt;
&lt;li&gt;虽然强制指定 -Xmn1g，但实际 Young 区还是会缩小；&lt;/li&gt;
&lt;li&gt;dev &amp;amp; test 环境，在出现如下 GC 日志时，Old Gen 只有小幅下降：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    - 2023-06-30T07:10:32.869+0000: 3600.316: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;GC pause &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;G1 Humongous Allocation&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;mixed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 3600.316: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;G1Ergonomics &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CSet Construction&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; start choosing CSet, _pending_cards: 26151, predicted base time: 42.80 ms, remaining time: 157.20 ms, target pause time: 200.00 ms&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    - 3600.316: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;G1Ergonomics &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CSet Construction&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; add young regions to CSet, eden: &lt;span class=&#34;m&#34;&gt;384&lt;/span&gt; regions, survivors: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; regions, predicted young region time: 3.51 ms&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    - 3600.316: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;G1Ergonomics &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CSet Construction&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; finish adding old regions to CSet, reason: predicted &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; is too high, predicted time: 1.00 ms, remaining time: 0.60 ms, old: &lt;span class=&#34;m&#34;&gt;153&lt;/span&gt; regions, min: &lt;span class=&#34;m&#34;&gt;83&lt;/span&gt; regions&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    - 3600.316: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;G1Ergonomics &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CSet Construction&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; finish choosing CSet, eden: &lt;span class=&#34;m&#34;&gt;384&lt;/span&gt; regions, survivors: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; regions, old: &lt;span class=&#34;m&#34;&gt;153&lt;/span&gt; regions, predicted pause time: 199.40 ms, target pause time: 200.00 ms&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    - G1 预测回收 Old Gen 时只剩余 0.6 ms，因此进行回收时只选取了少量的 Old Gen，且没有回收 Humongous 对象；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - 根据 jdk8u  的源码，此预测似乎基于对先前若干次回收时间的统计；
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;整体结论&#34;&gt;整体结论
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Old Gen 的快速上升主要是由于大量的 H-obj 分配，大对象的来源按频率排序，目前主要有 3 个:
&lt;ul&gt;
&lt;li&gt;ConsulCatalogWatch（SpringBoot）获取的数据大小约 170KB，约每 2 秒一次；&lt;/li&gt;
&lt;li&gt;CustomConfigWatch（javakit）获取的数据大小约 2MB，约每 27 秒一次；&lt;/li&gt;
&lt;li&gt;Prometheus&amp;amp;Metrics 监控数据，小于等于 1.3 MB，约 1 分钟一次？？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;H-obj 的分配速率与年轻代对象的增长速率大约成正比，且往往小于年轻代的增长速率；&lt;/li&gt;
&lt;li&gt;但存在一些特殊情况，在 mixed 回收阶段，由于 Old Gen 中可回收的 region 大于 5% 阈值，需要触发混合回收；且根据预测，可以留给 Old Gen 的回收时间非常短（不足 1ms），导致选择选择 CSet 时 Old Gen region 特别少，剩余 region 仍然大于 5%阈值，因此 mixed 阶段将持续，然后恶性循环（最多 8 次 mixed gc）；中间如果出发 YGC，则 humongous 对象会被清除，Old Gen 占用会大幅下降（真正的老年代对象并不会清除）；
&lt;ul&gt;
&lt;li&gt;问题在于预测时间为什么会这么短？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优化方案&#34;&gt;优化方案
&lt;/h2&gt;&lt;h3 id=&#34;优化-prometheusscrapeendpoint&#34;&gt;优化 PrometheusScrapeEndpoint
&lt;/h3&gt;&lt;p&gt;相关讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-projects/spring-framework/issues/25645&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;StringHttpMessageConverter may trigger humongous allocations (G1GC) #25645&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spring-projects/spring-boot/issues/21308&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Add support for streaming responses from actuator web endpoints #21308&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思路？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用一个 char[] 内存池，scrape 时从内存池获取一个足够大的 char 数组用于生成数据，完成后，将数组归还内存池？&lt;/li&gt;
&lt;li&gt;减少 tag 数量？
&lt;img src=&#34;https://zhumengzhu.github.io/images/old_gen_7_2023-6-26_19-48-46.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image7&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>Java 类冲突问题及其解决方案</title>
        <link>https://zhumengzhu.github.io/2023/04/java-class-conflict-and-solutions/</link>
        <pubDate>Mon, 03 Apr 2023 18:26:48 +0800</pubDate>
        
        <guid>https://zhumengzhu.github.io/2023/04/java-class-conflict-and-solutions/</guid>
        <description>&lt;h2 id=&#34;引子&#34;&gt;引子
&lt;/h2&gt;&lt;p&gt;在启动 Java 项时，可能会出现这种&lt;strong&gt;诡异&lt;/strong&gt;的现象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在本地可以启动，但部署到服务器上却不能启动；&lt;/li&gt;
&lt;li&gt;或者，在服务器可以启动，但本地不可以启动；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此时如果去查看错误日志，往往可以看到诸如 ClassNotFoundException、NoClassDefFoundError 等异常信息，接着很容易就会想到很可能是发生了类冲突。
然后你会结合异常日志即依赖变更情况，定位到冲突的类及其所在的 jar 包，然后用 dependecy-exclude 等手段将冲突解决掉，最终使得服务可以正常启动。一般我们处理问题就到此为止了。
本文试图更近一步，&lt;strong&gt;深入分析本地与远程服务器行为不一致的原因&lt;/strong&gt;，并简单介绍&lt;strong&gt;业界解决依赖冲突的一些方法，和排查类冲突问题的小技巧&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Java Classpath&lt;/strong&gt;:
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_1_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;本地启动的-classpath-顺序&#34;&gt;本地启动的 Classpath 顺序
&lt;/h2&gt;&lt;p&gt;本地一般都是在 IDEA 中启动；IDEA 启动服务时，会在 Console 打印启动参数：
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_2_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那么 IDEA 是以怎样的顺序将 jar 包添加到 classpath 中呢？&lt;/p&gt;
&lt;p&gt;答案：是按 Maven 依赖解析的方式进行加载的。通过执行 &lt;code&gt;mvn dependency:list&lt;/code&gt; 可以看到 Maven 依赖解析的结果，这个顺序，就是 classpath 中 jar 的添加顺序：
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_3_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;通过对比可以发现，两者顺序一致。&lt;/p&gt;
&lt;h2 id=&#34;远程启动的-classpath-顺序&#34;&gt;远程启动的 Classpath 顺序
&lt;/h2&gt;&lt;p&gt;登录服务器，使用 &lt;code&gt;ps aux | grep java&lt;/code&gt; 查看启动参数，会发现，&lt;strong&gt;远程服务器没有加 &lt;code&gt;-classpath&lt;/code&gt;  参数！！！相关的依赖在哪里？？？&lt;/strong&gt;
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_4_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;实际上，在构建项目时，Maven 会将所有的依赖都添加到 xx-server.jar 中的 BOOT-INF/lib 目录下。&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;&lt;strong&gt;JVM 在启动时，会根据 Jar 包中的另一个元数据文件&amp;ndash;&lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;，来决定类的加载顺序。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;meta-infmanifestmf&#34;&gt;META-INF/MANIFEST.MF
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_5_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，JVM 在加载类的顺序依赖 OS 时，对于 Linux 来说，最底层是 &lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/dcad5330b06f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;opendir&lt;/a&gt; 函数，这个函数返回的顺序，又与文件系统有关。『对于 CentOS 6，它使用的是Ext4，文件顺序与目录文件的大小是否超过一个磁盘块和文件系统计算的Hash值有关。』&lt;/p&gt;
&lt;p&gt;简单说，先加载完全是哪个看运气！远程服务器的版本不同，加载的顺序就可能不一样。这就是文章开头诡异问题的根源。&lt;/p&gt;
&lt;p&gt;看运气怎么行？！&lt;/p&gt;
&lt;h3 id=&#34;spring-boot-maven-plugin&#34;&gt;spring-boot-maven-plugin
&lt;/h3&gt;&lt;p&gt;这个插件使用了 &lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/redirect.html?page=executable-jar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Executable Jar Format&lt;/a&gt;，支持一种称之为 Classpath Index 的索引文件，负责指定 jar 被添加到 classpath 中的顺序。很明显，通过这个插件可以保证 jar 的扫描顺序在不同的环境下是一致的。完美解决上面的问题。
&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_6_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image6&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小节&#34;&gt;小节
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类的加载顺序取决于 classpath；&lt;/li&gt;
&lt;li&gt;嵌套的 JARS 中的加载顺序，在默认情况取决于 OS，对于 Linux 来说取决于文件系统；&lt;/li&gt;
&lt;li&gt;Spring Boot 提供了一个插件，利用 The Executable Jar Format 完美解决了加载顺序错乱问题；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它
&lt;/h2&gt;&lt;h3 id=&#34;业界的一些其他解决方案&#34;&gt;业界的一些其他解决方案
&lt;/h3&gt;&lt;p&gt;Spring Boot 的方案可以解决拥有 main 方法的服务的冲突问题，解决方法依赖一个 Maven 差距。&lt;/p&gt;
&lt;p&gt;对于开发或扩展类库(比如 guava/hadoop)，或者 Java Agent 的开发时，有时候面临的问题更复杂，甚至要解决 classloader 冲突的问题。&lt;/p&gt;
&lt;h4 id=&#34;maven-plugin-shade&#34;&gt;maven-plugin-shade
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lkxed/p/maven-plugin-shade.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maven-plugin-shade 详解&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;自定义类加载器&#34;&gt;自定义类加载器
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tianshuang.me/2021/10/Java-Agent-%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%9A%94%E7%A6%BB%E5%AE%9E%E7%8E%B0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java Agent 的类加载隔离实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;思路：『使用独立的类加载器去加载 Java Agent 依赖的类，该独立的类加载器的 parent 指向 Bootstrap ClassLoader，且&lt;strong&gt;将 Java Agent 依赖的类的默认后缀 .class 进行调整&lt;/strong&gt;，以避免系统类加载器加载到这些类，以实现类的隔离。』&lt;/p&gt;
&lt;h3 id=&#34;类冲突问题排查小技巧&#34;&gt;类冲突问题排查小技巧
&lt;/h3&gt;&lt;h4 id=&#34;加启动参数--verboseclasspath&#34;&gt;加启动参数 -verbose:classpath
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_7_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image7&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;加上这个参数， JVM 会将『哪个类是从哪个 jar中被加载』的信息输出到 console 中。&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;这个方法需要你能控制启动参数，适合在本地，不确定哪个类冲突的时候使用。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用-arthas-的-jad-功能&#34;&gt;使用 arthas 的 Jad 功能
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://zhumengzhu.github.io/images/class_conflict_8_2023-4-3_17-35-53.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image8&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;arthas 输出的信息更全面，出了现实加载的位置，还会告诉你 ClassLoader 是哪一个，并且自动反编译(&lt;font color=Orange&gt;jad 命令本来就是干这个的！&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;&lt;font color=Orange&gt;这个方法需要你安装 arthas，适合本地和 dev、test 环境，在你有了明确的怀疑对象时，优先使用这个命令。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何安装-arthas&#34;&gt;如何安装 arthas
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# https://arthas.aliyun.com/doc/install-detail.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -O https://arthas.aliyun.com/arthas-boot.jar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar arthas-boot.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
